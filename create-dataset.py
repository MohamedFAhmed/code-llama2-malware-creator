import os
import requests

# Your OpenAI API key
API_KEY = 'your-api-key'

# The OpenAI API URL for GPT-4
API_URL = 'https://api.openai.com/v1/engines/gpt-4/completions'

# Function to call the ChatGPT API
def call_chatgpt_api(source_code):
    headers = {
        'Authorization': f'Bearer {API_KEY}',
        'Content-Type': 'application/json',
    }
    
    data = {
        'prompt': f"I'm creating a training dataset that consists of (1) instruction, (2) task, (3) inputs, and (4) response. "
                  f"The response should be a source code similar to the one I will feed you below. "
                  f"I want you to create the instructions, task, and possible inputs based on the source code below, "
                  f"which will be the response the user is supposed to get.\n\n{source_code}",
        'max_tokens': 1024,
        'temperature': 0.7,
        'top_p': 1,
        'frequency_penalty': 0,
        'presence_penalty': 0,
    }

    response = requests.post(API_URL, headers=headers, json=data)
    response.raise_for_status()  # This will raise an exception for non-200 responses
    return response.json()

def format_dataset_entry(chatgpt_response, source_code):
    return f"""
===BEGIN DATASET===
INSTRUCTION: {chatgpt_response['instruction'].strip()}
TASK: {chatgpt_response['task'].strip()}
INPUTS: {chatgpt_response['inputs'].strip()}
RESPONSE: 
{source_code.strip()}
===END DATASET===
"""

def read_source_code(file_path):
    with open(file_path, 'r') as file:
        return file.read()

def write_dataset_entry(dataset_entry, output_file):
    with open(output_file, 'a') as file:
        file.write(dataset_entry + '\n')

def main(source_folder, output_file):
    for file_name in os.listdir(source_folder):
        if file_name.endswith(('.py', '.js', '.java', '.c', '.cpp')):  # Add other file extensions as needed
            file_path = os.path.join(source_folder, file_name)
            source_code = read_source_code(file_path)
            try:
                response = call_chatgpt_api(source_code)
                # Assuming that ChatGPT returns a JSON with 'instruction', 'task', and 'inputs' keys
                formatted_entry = format_dataset_entry(response['choices'][0], source_code)
                write_dataset_entry(formatted_entry, output_file)
            except requests.exceptions.RequestException as e:
                print(f"An error occurred: {e}")

# Set your source folder and the output dataset file path
source_folder = 'path_to_your_source_code_folder'
output_file = 'path_to_your_output_dataset_file.txt'

if __name__ == '__main__':
    main(source_folder, output_file)
